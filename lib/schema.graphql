
enum Action {
  CREATED
  DELETED
  UPDATED
  ASSIGN_PROJECT
  ASSIGN_MEMBER
  DONE
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

type LoginResponse {
  user: User
  success: Boolean
  token: String
}

type Mutation {
  addTodo(todo: TodoInput): Todo
  deleteTodo(id: Int): Todo
  assignTodoProject(todoId: Int, projectId: Int): Todo
  assignTodoToMember(todoId: Int, userId: String): Todo
  markDone(todoId: Int, value: Boolean): Todo
  login(user: String, password: String): LoginResponse
  register(id: String, name: String, password: String): RegisterResponse
  uploadAvatar(file: Upload!): File!
  createProject(name: String): Project
  addMember(userId: String, projectId: Int): Project
  removeMember(userId: String, projectId: Int): User
}

type Project {
  id: Int
  name: String
  manager: User
  members: [User]
  todos: [Todo]
}

type Query {
  todos: [Todo]
  todoById(id: Int): Todo
  profile: User
  projectById(projectId: Int): Project
  projects: [Project!]!
}

type RegisterResponse {
  user: User
  success: Boolean
}

type Subscription {
  todoNotification: TodoNotification
}

type Todo {
  id: Int
  title: String
  is_completed: Boolean
  created_at: String
  createdUser: User
  project: Project
  assignee: User
}

input TodoInput {
  title: String
  projectId: Int
}

type TodoNotification {
  action: Action
  payload: Todo
  userId: ID
}

scalar Upload

type User {
  id: ID
  name: String
  password: String
  created_at: String
  last_seen: String
  avatar_url: String
  projects: [Project]
  todos: [Todo]
  assignedTodos: [Todo]
}